{"ast":null,"code":"var _jsxFileName = \"/home/rlyz/wdi/sei-24-project-3/client/src/Components/User/IndivStore/CheckoutForm.js\";\nimport React, { useState } from 'react';\nimport { useStripe, useElements, CardElement } from '@stripe/react-stripe-js';\nexport default function Checkout(props) {\n  const [result, setResult] = useState(\"none\");\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const handleSubmit = async event => {\n    // Block native form submission.\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not loaded yet. Make sure to disable\n      // form submission until Stripe.js has loaded.\n      return;\n    } // Get a reference to a mounted CardElement. Elements knows how\n    // to find your CardElement because there can only ever be one of\n    // each type of element.\n\n\n    const cardElement = elements.getElement(CardElement); // Use your card Element with other Stripe.js APIs\n\n    const {\n      error,\n      paymentMethod\n    } = await stripe.createPaymentMethod({\n      type: 'card',\n      card: cardElement\n    });\n\n    if (error) {\n      console.log('[error]', error);\n    } else {\n      console.log('[PaymentMethod]', paymentMethod);\n      fetch('/submitOrder', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          card: paymentMethod,\n          order: props.data\n        })\n      }).then(res => res.json()).then(res => {\n        console.log(res);\n\n        switch (res.status) {\n          case \"Payment Complete\":\n            {}\n\n          case \"Payment Failed\":\n            {\n              setResult(\"block\");\n            }\n\n          case \"Insufficient Inventory\":\n            {}\n        }\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    style: {\n      maxWidth: \"500px\",\n      margin: \"0 auto\"\n    },\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CardElement, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    disabled: !stripe,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }, \"Pay\"), /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      display: result,\n      color: \"red\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }, \"Payment Failed\"));\n}","map":{"version":3,"sources":["/home/rlyz/wdi/sei-24-project-3/client/src/Components/User/IndivStore/CheckoutForm.js"],"names":["React","useState","useStripe","useElements","CardElement","Checkout","props","result","setResult","stripe","elements","handleSubmit","event","preventDefault","cardElement","getElement","error","paymentMethod","createPaymentMethod","type","card","console","log","fetch","method","headers","body","JSON","stringify","order","data","then","res","json","status","maxWidth","margin","display","color"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,SAAT,EAAoBC,WAApB,EAAiCC,WAAjC,QAAoD,yBAApD;AAEA,eAAe,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAEpC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC,MAAD,CAApC;AACA,QAAMQ,MAAM,GAAGP,SAAS,EAAxB;AACA,QAAMQ,QAAQ,GAAGP,WAAW,EAA5B;;AAEA,QAAMQ,YAAY,GAAG,MAAOC,KAAP,IAAiB;AAClC;AACAA,IAAAA,KAAK,CAACC,cAAN;;AAEA,QAAI,CAACJ,MAAD,IAAW,CAACC,QAAhB,EAA0B;AACtB;AACA;AACA;AACH,KARiC,CAUlC;AACA;AACA;;;AACA,UAAMI,WAAW,GAAGJ,QAAQ,CAACK,UAAT,CAAoBX,WAApB,CAApB,CAbkC,CAelC;;AACA,UAAM;AAAEY,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAA2B,MAAMR,MAAM,CAACS,mBAAP,CAA2B;AAC9DC,MAAAA,IAAI,EAAE,MADwD;AAE9DC,MAAAA,IAAI,EAAEN;AAFwD,KAA3B,CAAvC;;AAKA,QAAIE,KAAJ,EAAW;AACPK,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBN,KAAvB;AACH,KAFD,MAEO;AACHK,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BL,aAA/B;AACAM,MAAAA,KAAK,CAAC,cAAD,EAAiB;AAClBC,QAAAA,MAAM,EAAE,MADU;AAElBC,QAAAA,OAAO,EAAE;AACL,0BAAgB;AADX,SAFS;AAKlBC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBR,UAAAA,IAAI,EAAEH,aADW;AAEjBY,UAAAA,KAAK,EAAEvB,KAAK,CAACwB;AAFI,SAAf;AALY,OAAjB,CAAL,CAUKC,IAVL,CAUUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAVjB,EAWKF,IAXL,CAWUC,GAAG,IAAI;AACTX,QAAAA,OAAO,CAACC,GAAR,CAAYU,GAAZ;;AACA,gBAAQA,GAAG,CAACE,MAAZ;AACI,eAAK,kBAAL;AAAyB,aAExB;;AACD,eAAK,gBAAL;AAAuB;AACnB1B,cAAAA,SAAS,CAAC,OAAD,CAAT;AACH;;AACD,eAAK,wBAAL;AAA+B,aAE9B;AATL;AAaH,OA1BL;AA2BH;AACJ,GArDD;;AAuDA,sBACI;AAAM,IAAA,KAAK,EAAE;AAAE2B,MAAAA,QAAQ,EAAE,OAAZ;AAAqBC,MAAAA,MAAM,EAAE;AAA7B,KAAb;AAAsD,IAAA,QAAQ,EAAEzB,YAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAEI;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,QAAQ,EAAE,CAACF,MAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAFJ,eAKI;AAAG,IAAA,KAAK,EAAE;AAAE4B,MAAAA,OAAO,EAAE9B,MAAX;AAAmB+B,MAAAA,KAAK,EAAE;AAA1B,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBALJ,CADJ;AASH","sourcesContent":["import React, { useState } from 'react'\r\nimport { useStripe, useElements, CardElement } from '@stripe/react-stripe-js';\r\n\r\nexport default function Checkout(props) {\r\n\r\n    const [result, setResult] = useState(\"none\")\r\n    const stripe = useStripe();\r\n    const elements = useElements();\r\n\r\n    const handleSubmit = async (event) => {\r\n        // Block native form submission.\r\n        event.preventDefault();\r\n\r\n        if (!stripe || !elements) {\r\n            // Stripe.js has not loaded yet. Make sure to disable\r\n            // form submission until Stripe.js has loaded.\r\n            return;\r\n        }\r\n\r\n        // Get a reference to a mounted CardElement. Elements knows how\r\n        // to find your CardElement because there can only ever be one of\r\n        // each type of element.\r\n        const cardElement = elements.getElement(CardElement);\r\n\r\n        // Use your card Element with other Stripe.js APIs\r\n        const { error, paymentMethod } = await stripe.createPaymentMethod({\r\n            type: 'card',\r\n            card: cardElement,\r\n        });\r\n\r\n        if (error) {\r\n            console.log('[error]', error);\r\n        } else {\r\n            console.log('[PaymentMethod]', paymentMethod);\r\n            fetch('/submitOrder', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    card: paymentMethod,\r\n                    order: props.data\r\n                })\r\n            })\r\n                .then(res => res.json())\r\n                .then(res => {\r\n                    console.log(res)\r\n                    switch (res.status) {\r\n                        case \"Payment Complete\": {\r\n\r\n                        }\r\n                        case \"Payment Failed\": {\r\n                            setResult(\"block\")\r\n                        }\r\n                        case \"Insufficient Inventory\": {\r\n\r\n                        }\r\n\r\n\r\n                    }\r\n                })\r\n        }\r\n    };\r\n\r\n    return (\r\n        <form style={{ maxWidth: \"500px\", margin: \"0 auto\" }} onSubmit={handleSubmit}>\r\n            <CardElement />\r\n            <button type=\"submit\" disabled={!stripe}>\r\n                Pay\r\n        </button>\r\n            <p style={{ display: result, color: \"red\" }} >Payment Failed</p>\r\n        </form>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}