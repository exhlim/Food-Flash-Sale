{"ast":null,"code":"var _jsxFileName = \"/home/rlyz/wdi/sei-24-project-3/client/src/Components/User/TimeLine/TimeLine.js\";\nimport React, { Component } from 'react';\nimport EachMerchant from './EachMerchant/EachMerchant';\nimport OrderHistory from '../OrderHistory/OrderHistory';\nimport { Route, Link, Redirect, Switch } from 'react-router-dom';\nimport IndivListing from '../IndivStore/IndivListing';\nimport ListingContainer from '../IndivStore/ListingContainer';\nvar fetching = true;\nexport default class TimeLine extends Component {\n  constructor(props) {\n    super();\n\n    this.testing = prop => {\n      if (fetching === true) {\n        fetching = false; // setTimeout(() => {\n        //     console.log(`fetching soon`)\n        //     fetch('/timeline')\n        //         .then(res => res.json())\n        //         .then(res => {\n        //             console.log(res, `fetched`)\n        //             fetching = true\n        //             this.setState({\n        //                 timeLine: res,\n        //                 fetch: !this.state.fetch\n        //             })\n        //         })\n        // }, 5000)\n\n        fetching = true;\n        setTimeout(() => {\n          let defunctArray = this.state.timeLine.map((item, index) => {\n            const uploadTime = new Date(item.time);\n            uploadTime.setMinutes(uploadTime.getMinutes() + item.time_limit_min);\n            let difference = +uploadTime - +new Date();\n\n            if (difference < 0) {\n              return item;\n            }\n          });\n          let newArray = defunctArray.filter(item => {\n            return item;\n          });\n          console.log(`fetching soon`);\n          fetch('/tidyuplisting', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              toBeDeleted: newArray\n            })\n          }).then(res => res.text()).then(res => {\n            console.log(res);\n          });\n        }, 5000);\n      }\n    };\n\n    this.state = {\n      timeLine: [],\n      oldTimeLine: [],\n      fetch: true\n    };\n  }\n\n  componentDidMount() {\n    fetch('/timeline').then(res => res.json()).then(res => {\n      // console.log(res);\n      this.setState({\n        timeLine: res,\n        newTimeLine: res\n      });\n    });\n  } // componentDidUpdate() {\n  //     console.log(`please no`)\n  //     if (this.state.newTimeLine !== this.state.timeLine) {\n  //         console.log(`here?`)\n  //         fetch('/timeline')\n  //             .then(res => res.json())\n  //             .then(res => {\n  //                 // console.log(res);\n  //                 this.setState({\n  //                     timeLine: res\n  //                 })\n  //             })\n  //     }\n  // }\n  // testing = (timeleft, merchantID) => {\n  //     if (timeleft.hours === 0 && timeleft.minutes === 0 && timeleft.seconds === 0) {\n  //         console.log(`passed the first conditional`)\n  //         //timeOut are the cards which timed out that we're filtering out from the current timeline\n  //         let timeOut = this.state.timeLine.filter(card => {\n  //             if (card.merchant_id === merchantID) {\n  //                 return card\n  //             }\n  //         })\n  //         console.log(timeOut, `this is timeOut`)\n  //         if (timeOut.length > 0 && this.state.fetch === true) {\n  //             this.setState({\n  //                 fetch: !this.state.fetch\n  //             })\n  //             setTimeout(fetch('/timeline')\n  //                 .then(res => res.json())\n  //                 .then(res => {\n  //                     console.log(res);\n  //                     //we are setting the cards we have removed as the oldTimeLine state, refresh the timeLine state with the new fetched cards, and setting a newtimeline that represents the timeline without the spliced cards\n  //                     this.setState({\n  //                         timeLine: res,\n  //                         oldTimeLine: timeOut, //(the removed/ timedout items)\n  //                         fetch: !this.state.fetch //(prev timeline minus removed items)\n  //                     })\n  //                 }), 10000)\n  //             // console.log(`in timeoutlength> 0`)\n  //             // let newTimeLine = this.state.timeLine\n  //             // console.log(newTimeLine, `before`)\n  //             // timeOut.forEach(card1 => newTimeLine.splice(newTimeLine.findIndex(card2 => card2.name === card1.name), 1))\n  //             // //we are splicing out from the current timeline the cards that have timedout\n  //             // console.log(newTimeLine, `after`)\n  //         }\n  //     }\n  // }\n\n\n  render() {\n    let newArray = this.state.timeLine.map((item, index) => {\n      const uploadTime = new Date(item.time);\n      uploadTime.setMinutes(uploadTime.getMinutes() + item.time_limit_min);\n      let difference = +uploadTime - +new Date();\n\n      if (difference > 0) {\n        return item;\n      }\n    });\n    let newerArray = newArray.filter(item => {\n      return item;\n    });\n    newerArray.sort(function (a, b) {\n      const uploadTimeA = new Date(a.time);\n      uploadTimeA.setMinutes(uploadTimeA.getMinutes() + a.time_limit_min);\n      const uploadTimeB = new Date(b.time);\n      uploadTimeB.setMinutes(uploadTimeB.getMinutes() + b.time_limit_min);\n      return uploadTimeA - uploadTimeB;\n    }); // console.log(newerArray, `before splice`)\n\n    if (newerArray.length > 20) {\n      newerArray.splice(19, newerArray.length - 20);\n    } // console.log(newerArray, `After splice`)\n\n\n    let merchantCard = newerArray.map((eachCard, index) => {\n      const discount = (eachCard.unit_price - eachCard.price_floor) / eachCard.unit_price * 100;\n      let path = \"/\" + eachCard.merchant_id;\n      return /*#__PURE__*/React.createElement(Link, {\n        to: path,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 20\n        }\n      }, /*#__PURE__*/React.createElement(EachMerchant, {\n        key: index,\n        duration: eachCard.time_limit_min,\n        listing: eachCard.listing_id,\n        time: eachCard.time,\n        merchant_Id: eachCard.merchant_id,\n        unmount: this.merchantCardUnmountHandler,\n        what: this.testing,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 21\n        }\n      }, index, eachCard.name), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 21\n        }\n      }, \"up to\", discount, \"%\")));\n    });\n    const routeArray = newerArray.map((eachCard, index) => {\n      let path = \"/\" + eachCard.merchant_id;\n      return /*#__PURE__*/React.createElement(Route, {\n        path: path,\n        render: () => /*#__PURE__*/React.createElement(ListingContainer, {\n          merchant_id: eachCard.merchant_id,\n          stripper: this.props.stripper,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 23\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 20\n        }\n      });\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"navbar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 21\n      }\n    }, \"Image here\"), /*#__PURE__*/React.createElement(Link, {\n      className: \"login break\",\n      to: \"/Timeline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 21\n      }\n    }, \"Timeline\"), /*#__PURE__*/React.createElement(Link, {\n      className: \"login break\",\n      to: \"/Orderhistory\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 21\n      }\n    }, \"Order history\")), /*#__PURE__*/React.createElement(\"main\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Switch, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 21\n      }\n    }, routeArray, /*#__PURE__*/React.createElement(Route, {\n      path: \"/Orderhistory\",\n      render: () => /*#__PURE__*/React.createElement(OrderHistory, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 35\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/\",\n      render: () => /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 35\n        }\n      }, merchantCard),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 25\n      }\n    }))));\n  }\n\n}","map":{"version":3,"sources":["/home/rlyz/wdi/sei-24-project-3/client/src/Components/User/TimeLine/TimeLine.js"],"names":["React","Component","EachMerchant","OrderHistory","Route","Link","Redirect","Switch","IndivListing","ListingContainer","fetching","TimeLine","constructor","props","testing","prop","setTimeout","defunctArray","state","timeLine","map","item","index","uploadTime","Date","time","setMinutes","getMinutes","time_limit_min","difference","newArray","filter","console","log","fetch","method","headers","body","JSON","stringify","toBeDeleted","then","res","text","oldTimeLine","componentDidMount","json","setState","newTimeLine","render","newerArray","sort","a","b","uploadTimeA","uploadTimeB","length","splice","merchantCard","eachCard","discount","unit_price","price_floor","path","merchant_id","listing_id","merchantCardUnmountHandler","name","routeArray","stripper"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport EachMerchant from './EachMerchant/EachMerchant'\nimport OrderHistory from '../OrderHistory/OrderHistory'\nimport { Route, Link, Redirect, Switch } from 'react-router-dom'\nimport IndivListing from '../IndivStore/IndivListing'\nimport ListingContainer from '../IndivStore/ListingContainer'\n\nvar fetching = true\n\nexport default class TimeLine extends Component {\n    constructor(props) {\n        super()\n        this.state = {\n            timeLine: [],\n            oldTimeLine: [],\n            fetch: true\n        }\n    }\n    componentDidMount() {\n        fetch('/timeline')\n            .then(res => res.json())\n            .then(res => {\n                // console.log(res);\n                this.setState({\n                    timeLine: res,\n                    newTimeLine: res\n                })\n            })\n    }\n\n    // componentDidUpdate() {\n    //     console.log(`please no`)\n    //     if (this.state.newTimeLine !== this.state.timeLine) {\n    //         console.log(`here?`)\n    //         fetch('/timeline')\n    //             .then(res => res.json())\n    //             .then(res => {\n    //                 // console.log(res);\n    //                 this.setState({\n    //                     timeLine: res\n    //                 })\n    //             })\n    //     }\n    // }\n\n    // testing = (timeleft, merchantID) => {\n    //     if (timeleft.hours === 0 && timeleft.minutes === 0 && timeleft.seconds === 0) {\n    //         console.log(`passed the first conditional`)\n    //         //timeOut are the cards which timed out that we're filtering out from the current timeline\n    //         let timeOut = this.state.timeLine.filter(card => {\n    //             if (card.merchant_id === merchantID) {\n    //                 return card\n    //             }\n    //         })\n    //         console.log(timeOut, `this is timeOut`)\n    //         if (timeOut.length > 0 && this.state.fetch === true) {\n    //             this.setState({\n    //                 fetch: !this.state.fetch\n    //             })\n    //             setTimeout(fetch('/timeline')\n    //                 .then(res => res.json())\n    //                 .then(res => {\n    //                     console.log(res);\n    //                     //we are setting the cards we have removed as the oldTimeLine state, refresh the timeLine state with the new fetched cards, and setting a newtimeline that represents the timeline without the spliced cards\n    //                     this.setState({\n    //                         timeLine: res,\n    //                         oldTimeLine: timeOut, //(the removed/ timedout items)\n    //                         fetch: !this.state.fetch //(prev timeline minus removed items)\n    //                     })\n    //                 }), 10000)\n    //             // console.log(`in timeoutlength> 0`)\n    //             // let newTimeLine = this.state.timeLine\n    //             // console.log(newTimeLine, `before`)\n    //             // timeOut.forEach(card1 => newTimeLine.splice(newTimeLine.findIndex(card2 => card2.name === card1.name), 1))\n    //             // //we are splicing out from the current timeline the cards that have timedout\n    //             // console.log(newTimeLine, `after`)\n    //         }\n\n    //     }\n    // }\n\n    testing = (prop) => {\n\n        if (fetching === true) {\n            fetching = false\n            // setTimeout(() => {\n            //     console.log(`fetching soon`)\n            //     fetch('/timeline')\n            //         .then(res => res.json())\n            //         .then(res => {\n            //             console.log(res, `fetched`)\n            //             fetching = true\n            //             this.setState({\n            //                 timeLine: res,\n            //                 fetch: !this.state.fetch\n            //             })\n            //         })\n            // }, 5000)\n\n            fetching = true\n            setTimeout(() => {\n                let defunctArray = this.state.timeLine.map((item, index) => {\n                    const uploadTime = new Date(item.time)\n                    uploadTime.setMinutes(uploadTime.getMinutes() + item.time_limit_min)\n                    let difference = +uploadTime - +new Date();\n                    if (difference < 0) {\n                        return item\n                    }\n                })\n                let newArray = defunctArray.filter((item) => {\n                    return item\n                })\n                console.log(`fetching soon`)\n                fetch('/tidyuplisting', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({ toBeDeleted: newArray })\n                })\n                    .then((res) => res.text())\n                    .then((res) => {\n                        console.log(res)\n                    })\n            }, 5000)\n        }\n    }\n\n\n    render() {\n        let newArray = this.state.timeLine.map((item, index) => {\n            const uploadTime = new Date(item.time)\n            uploadTime.setMinutes(uploadTime.getMinutes() + item.time_limit_min)\n            let difference = +uploadTime - +new Date();\n            if (difference > 0) {\n                return item\n            }\n        })\n        let newerArray = newArray.filter((item) => {\n            return item\n        })\n\n\n        newerArray.sort(function (a, b) {\n            const uploadTimeA = new Date(a.time)\n            uploadTimeA.setMinutes(uploadTimeA.getMinutes() + a.time_limit_min)\n            const uploadTimeB = new Date(b.time)\n            uploadTimeB.setMinutes(uploadTimeB.getMinutes() + b.time_limit_min)\n            return uploadTimeA - uploadTimeB\n        })\n        // console.log(newerArray, `before splice`)\n        if (newerArray.length > 20) {\n            newerArray.splice(19, newerArray.length - 20)\n        }\n        // console.log(newerArray, `After splice`)\n        let merchantCard = newerArray.map((eachCard, index) => {\n            const discount = (eachCard.unit_price - eachCard.price_floor) / eachCard.unit_price * 100\n            let path = \"/\" + eachCard.merchant_id\n            return <Link to={path}>\n\n                <EachMerchant key={index} duration={eachCard.time_limit_min} listing={eachCard.listing_id} time={eachCard.time} merchant_Id={eachCard.merchant_id} unmount={this.merchantCardUnmountHandler} what={this.testing}>\n                    <div>{index}{eachCard.name}</div>\n                    <div>up to{discount}%</div>\n                </EachMerchant>\n\n            </Link>\n        })\n\n        const routeArray = newerArray.map((eachCard, index) => {\n            let path = \"/\" + eachCard.merchant_id\n            return <Route path={path} render={\n                () => <ListingContainer merchant_id={eachCard.merchant_id} stripper={this.props.stripper} />\n            } />\n        })\n        return (\n            <div>\n                <div className=\"navbar\">\n                    <div>Image here</div>\n                    <Link className=\"login break\" to=\"/Timeline\">Timeline</Link>\n                    <Link className=\"login break\" to=\"/Orderhistory\">Order history</Link>\n                </div>\n                <main>\n                    <Switch>\n                        {routeArray}\n                        <Route path=\"/Orderhistory\" render={\n                            () => <OrderHistory />\n                        } />\n                        <Route path=\"/\" render={\n                            () => <div>{merchantCard}</div>\n                        } />\n                    </Switch>\n                </main>\n            </div >\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}