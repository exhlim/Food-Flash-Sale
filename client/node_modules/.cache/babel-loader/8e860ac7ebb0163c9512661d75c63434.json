{"ast":null,"code":"var _jsxFileName = \"/home/rlyz/wdi/sei-24-project-3/client/src/Components/Merchant/ItemList/Toggle/Toggle.js\";\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport isString from 'lodash/isString';\nimport React, { Component } from 'react';\nimport isBoolean from 'lodash/isBoolean';\nimport isFunction from 'lodash/isFunction';\nimport './index.scss';\n\nclass Toggle extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      enabled: this.enabledFromProps()\n    };\n\n    this.isEnabled = () => this.state.enabled;\n\n    this.toggleSwitch = e => {\n      e.persist();\n      e.preventDefault();\n      const {\n        onClick,\n        onStateChanged\n      } = this.props;\n      this.setState({\n        enabled: !this.state.enabled\n      }, () => {\n        const state = this.state; // Augument the event object with SWITCH_STATE\n\n        const switchEvent = Object.assign(e, {\n          SWITCH_STATE: state\n        }); // Execute the callback functions\n\n        isFunction(onClick) && onClick(switchEvent);\n        isFunction(onStateChanged) && onStateChanged(state);\n      });\n    };\n  }\n\n  enabledFromProps() {\n    let {\n      enabled\n    } = this.props; // If enabled is a function, invoke the function\n\n    enabled = isFunction(enabled) ? enabled() : enabled; // Return enabled if it is a boolean, otherwise false\n\n    return isBoolean(enabled) && enabled;\n  }\n\n  render() {\n    const {\n      enabled\n    } = this.state;\n    console.log(this.props.onClick); // Isolate special props and store the remaining as restProps\n\n    const {\n      enabled: _enabled,\n      theme,\n      onClick,\n      className,\n      onStateChanged,\n      ...restProps\n    } = this.props; // Use default as a fallback theme if valid theme is not passed\n\n    const switchTheme = theme && isString(theme) ? theme : 'default';\n    const switchClasses = classnames(`switch switch--${switchTheme}`, className); //classnames takes in arguments and combines based on boolean value\n\n    const togglerClasses = classnames('switch-toggle', `switch-toggle--${enabled ? 'on' : 'off'}`);\n    return /*#__PURE__*/React.createElement(\"div\", Object.assign({\n      className: switchClasses,\n      onClick: this.toggleSwitch\n    }, restProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: togglerClasses,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nToggle.propTypes = {\n  theme: PropTypes.string,\n  enabled: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n  onStateChanged: PropTypes.func\n};\nexport default Toggle;","map":{"version":3,"sources":["/home/rlyz/wdi/sei-24-project-3/client/src/Components/Merchant/ItemList/Toggle/Toggle.js"],"names":["PropTypes","classnames","isString","React","Component","isBoolean","isFunction","Toggle","state","enabled","enabledFromProps","isEnabled","toggleSwitch","e","persist","preventDefault","onClick","onStateChanged","props","setState","switchEvent","Object","assign","SWITCH_STATE","render","console","log","_enabled","theme","className","restProps","switchTheme","switchClasses","togglerClasses","propTypes","string","oneOfType","bool","func"],"mappings":";AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,OAAOC,UAAP,MAAuB,mBAAvB;AACA,OAAO,cAAP;;AAIA,MAAMC,MAAN,SAAqBH,SAArB,CAA+B;AAAA;AAAA;AAAA,SAE3BI,KAF2B,GAEnB;AAAEC,MAAAA,OAAO,EAAE,KAAKC,gBAAL;AAAX,KAFmB;;AAAA,SAI3BC,SAJ2B,GAIf,MAAM,KAAKH,KAAL,CAAWC,OAJF;;AAAA,SAgB3BG,YAhB2B,GAgBXC,CAAD,IAAO;AAClBA,MAAAA,CAAC,CAACC,OAAF;AACAD,MAAAA,CAAC,CAACE,cAAF;AAEA,YAAM;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,UAA8B,KAAKC,KAAzC;AAEA,WAAKC,QAAL,CAAc;AAAEV,QAAAA,OAAO,EAAE,CAAC,KAAKD,KAAL,CAAWC;AAAvB,OAAd,EAAgD,MAAM;AAClD,cAAMD,KAAK,GAAG,KAAKA,KAAnB,CADkD,CAGlD;;AACA,cAAMY,WAAW,GAAGC,MAAM,CAACC,MAAP,CAAcT,CAAd,EAAiB;AAAEU,UAAAA,YAAY,EAAEf;AAAhB,SAAjB,CAApB,CAJkD,CAMlD;;AACAF,QAAAA,UAAU,CAACU,OAAD,CAAV,IAAuBA,OAAO,CAACI,WAAD,CAA9B;AACAd,QAAAA,UAAU,CAACW,cAAD,CAAV,IAA8BA,cAAc,CAACT,KAAD,CAA5C;AACH,OATD;AAUH,KAhC0B;AAAA;;AAM3BE,EAAAA,gBAAgB,GAAG;AACf,QAAI;AAAED,MAAAA;AAAF,QAAc,KAAKS,KAAvB,CADe,CAGf;;AACAT,IAAAA,OAAO,GAAGH,UAAU,CAACG,OAAD,CAAV,GAAsBA,OAAO,EAA7B,GAAkCA,OAA5C,CAJe,CAMf;;AACA,WAAOJ,SAAS,CAACI,OAAD,CAAT,IAAsBA,OAA7B;AACH;;AAoBDe,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEf,MAAAA;AAAF,QAAc,KAAKD,KAAzB;AACAiB,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKR,KAAL,CAAWF,OAAvB,EAFK,CAGL;;AACA,UAAM;AAAEP,MAAAA,OAAO,EAAEkB,QAAX;AAAqBC,MAAAA,KAArB;AAA4BZ,MAAAA,OAA5B;AAAqCa,MAAAA,SAArC;AAAgDZ,MAAAA,cAAhD;AAAgE,SAAGa;AAAnE,QAAiF,KAAKZ,KAA5F,CAJK,CAML;;AACA,UAAMa,WAAW,GAAIH,KAAK,IAAI1B,QAAQ,CAAC0B,KAAD,CAAlB,GAA6BA,KAA7B,GAAqC,SAAzD;AAEA,UAAMI,aAAa,GAAG/B,UAAU,CAC3B,kBAAiB8B,WAAY,EADF,EAE5BF,SAF4B,CAAhC,CATK,CAcL;;AACA,UAAMI,cAAc,GAAGhC,UAAU,CAC7B,eAD6B,EAE5B,kBAAiBQ,OAAO,GAAG,IAAH,GAAU,KAAM,EAFZ,CAAjC;AAKA,wBACI;AAAK,MAAA,SAAS,EAAEuB,aAAhB;AAA+B,MAAA,OAAO,EAAE,KAAKpB;AAA7C,OAA+DkB,SAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACI;AAAK,MAAA,SAAS,EAAEG,cAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ;AAKH;;AA3D0B;;AA8D/B1B,MAAM,CAAC2B,SAAP,GAAmB;AACfN,EAAAA,KAAK,EAAE5B,SAAS,CAACmC,MADF;AAEf1B,EAAAA,OAAO,EAAET,SAAS,CAACoC,SAAV,CAAoB,CACzBpC,SAAS,CAACqC,IADe,EAEzBrC,SAAS,CAACsC,IAFe,CAApB,CAFM;AAMfrB,EAAAA,cAAc,EAAEjB,SAAS,CAACsC;AANX,CAAnB;AASA,eAAe/B,MAAf","sourcesContent":["import PropTypes from 'prop-types';\r\nimport classnames from 'classnames';\r\nimport isString from 'lodash/isString';\r\nimport React, { Component } from 'react';\r\nimport isBoolean from 'lodash/isBoolean';\r\nimport isFunction from 'lodash/isFunction';\r\nimport './index.scss';\r\n\r\n\r\n\r\nclass Toggle extends Component {\r\n\r\n    state = { enabled: this.enabledFromProps() }\r\n\r\n    isEnabled = () => this.state.enabled\r\n\r\n    enabledFromProps() {\r\n        let { enabled } = this.props;\r\n\r\n        // If enabled is a function, invoke the function\r\n        enabled = isFunction(enabled) ? enabled() : enabled;\r\n\r\n        // Return enabled if it is a boolean, otherwise false\r\n        return isBoolean(enabled) && enabled;\r\n    }\r\n\r\n    toggleSwitch = (e) => {\r\n        e.persist();\r\n        e.preventDefault();\r\n\r\n        const { onClick, onStateChanged } = this.props;\r\n\r\n        this.setState({ enabled: !this.state.enabled }, () => {\r\n            const state = this.state;\r\n\r\n            // Augument the event object with SWITCH_STATE\r\n            const switchEvent = Object.assign(e, { SWITCH_STATE: state });\r\n\r\n            // Execute the callback functions\r\n            isFunction(onClick) && onClick(switchEvent);\r\n            isFunction(onStateChanged) && onStateChanged(state);\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { enabled } = this.state;\r\n        console.log(this.props.onClick)\r\n        // Isolate special props and store the remaining as restProps\r\n        const { enabled: _enabled, theme, onClick, className, onStateChanged, ...restProps } = this.props;\r\n\r\n        // Use default as a fallback theme if valid theme is not passed\r\n        const switchTheme = (theme && isString(theme)) ? theme : 'default';\r\n\r\n        const switchClasses = classnames(\r\n            `switch switch--${switchTheme}`,\r\n            className\r\n        )\r\n\r\n        //classnames takes in arguments and combines based on boolean value\r\n        const togglerClasses = classnames(\r\n            'switch-toggle',\r\n            `switch-toggle--${enabled ? 'on' : 'off'}`\r\n        )\r\n\r\n        return (\r\n            <div className={switchClasses} onClick={this.toggleSwitch} {...restProps}>\r\n                <div className={togglerClasses}></div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nToggle.propTypes = {\r\n    theme: PropTypes.string,\r\n    enabled: PropTypes.oneOfType([\r\n        PropTypes.bool,\r\n        PropTypes.func\r\n    ]),\r\n    onStateChanged: PropTypes.func\r\n}\r\n\r\nexport default Toggle;"]},"metadata":{},"sourceType":"module"}