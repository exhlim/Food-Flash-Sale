{"ast":null,"code":"import _regeneratorRuntime from\"/Users/eugenelim/Desktop/wdi/SEI-24-Project-3/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/eugenelim/Desktop/wdi/SEI-24-Project-3/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import React from'react';import{useStripe,useElements,CardElement}from'@stripe/react-stripe-js';export default function Checkout(props){var stripe=useStripe();var elements=useElements();var handleSubmit=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(event){var cardElement,_yield$stripe$createP,error,paymentMethod;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:// Block native form submission.\nevent.preventDefault();if(!(!stripe||!elements)){_context.next=3;break;}return _context.abrupt(\"return\");case 3:// Get a reference to a mounted CardElement. Elements knows how\n// to find your CardElement because there can only ever be one of\n// each type of element.\ncardElement=elements.getElement(CardElement);// Use your card Element with other Stripe.js APIs\n_context.next=6;return stripe.createPaymentMethod({type:'card',card:cardElement});case 6:_yield$stripe$createP=_context.sent;error=_yield$stripe$createP.error;paymentMethod=_yield$stripe$createP.paymentMethod;if(error){console.log('[error]',error);}else{console.log('[PaymentMethod]',paymentMethod);fetch('/submitOrder',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({card:paymentMethod,order:props.data})}).then(function(res){return res.json();}).then(function(res){console.log(res);});}case 10:case\"end\":return _context.stop();}}},_callee);}));return function handleSubmit(_x){return _ref.apply(this,arguments);};}();return/*#__PURE__*/React.createElement(\"form\",{style:{maxWidth:\"500px\",margin:\"0 auto\"},onSubmit:handleSubmit},/*#__PURE__*/React.createElement(CardElement,null),/*#__PURE__*/React.createElement(\"button\",{type:\"submit\",disabled:!stripe},\"Pay\"));}","map":{"version":3,"sources":["/Users/eugenelim/Desktop/wdi/SEI-24-Project-3/client/src/Components/User/IndivStore/CheckoutForm.js"],"names":["React","useStripe","useElements","CardElement","Checkout","props","stripe","elements","handleSubmit","event","preventDefault","cardElement","getElement","createPaymentMethod","type","card","error","paymentMethod","console","log","fetch","method","headers","body","JSON","stringify","order","data","then","res","json","maxWidth","margin"],"mappings":"mVAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,SAAT,CAAoBC,WAApB,CAAiCC,WAAjC,KAAoD,yBAApD,CAEA,cAAe,SAASC,CAAAA,QAAT,CAAkBC,KAAlB,CAAyB,CAGpC,GAAMC,CAAAA,MAAM,CAAGL,SAAS,EAAxB,CACA,GAAMM,CAAAA,QAAQ,CAAGL,WAAW,EAA5B,CAEA,GAAMM,CAAAA,YAAY,0FAAG,iBAAOC,KAAP,4KACjB;AACAA,KAAK,CAACC,cAAN,GAFiB,KAIb,CAACJ,MAAD,EAAW,CAACC,QAJC,kEAUjB;AACA;AACA;AACMI,WAbW,CAaGJ,QAAQ,CAACK,UAAT,CAAoBT,WAApB,CAbH,CAejB;AAfiB,sBAgBsBG,CAAAA,MAAM,CAACO,mBAAP,CAA2B,CAC9DC,IAAI,CAAE,MADwD,CAE9DC,IAAI,CAAEJ,WAFwD,CAA3B,CAhBtB,4CAgBTK,KAhBS,uBAgBTA,KAhBS,CAgBFC,aAhBE,uBAgBFA,aAhBE,CAqBjB,GAAID,KAAJ,CAAW,CACPE,OAAO,CAACC,GAAR,CAAY,SAAZ,CAAuBH,KAAvB,EACH,CAFD,IAEO,CACHE,OAAO,CAACC,GAAR,CAAY,iBAAZ,CAA+BF,aAA/B,EACAG,KAAK,CAAC,cAAD,CAAiB,CAClBC,MAAM,CAAE,MADU,CAElBC,OAAO,CAAE,CACL,eAAgB,kBADX,CAFS,CAKlBC,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAe,CACjBV,IAAI,CAAEE,aADW,CAEjBS,KAAK,CAAErB,KAAK,CAACsB,IAFI,CAAf,CALY,CAAjB,CAAL,CAUKC,IAVL,CAUU,SAACC,GAAD,QAASA,CAAAA,GAAG,CAACC,IAAJ,EAAT,EAVV,EAWKF,IAXL,CAWU,SAACC,GAAD,CAAS,CACXX,OAAO,CAACC,GAAR,CAAYU,GAAZ,EAEH,CAdL,EAeH,CAxCgB,uDAAH,kBAAZrB,CAAAA,YAAY,4CAAlB,CA2CA,mBACI,4BAAM,KAAK,CAAE,CAAEuB,QAAQ,CAAE,OAAZ,CAAqBC,MAAM,CAAE,QAA7B,CAAb,CAAsD,QAAQ,CAAExB,YAAhE,eACI,oBAAC,WAAD,MADJ,cAEI,8BAAQ,IAAI,CAAC,QAAb,CAAsB,QAAQ,CAAE,CAACF,MAAjC,QAFJ,CADJ,CAQH","sourcesContent":["import React from 'react'\r\nimport { useStripe, useElements, CardElement } from '@stripe/react-stripe-js';\r\n\r\nexport default function Checkout(props) {\r\n\r\n\r\n    const stripe = useStripe();\r\n    const elements = useElements();\r\n\r\n    const handleSubmit = async (event) => {\r\n        // Block native form submission.\r\n        event.preventDefault();\r\n\r\n        if (!stripe || !elements) {\r\n            // Stripe.js has not loaded yet. Make sure to disable\r\n            // form submission until Stripe.js has loaded.\r\n            return;\r\n        }\r\n\r\n        // Get a reference to a mounted CardElement. Elements knows how\r\n        // to find your CardElement because there can only ever be one of\r\n        // each type of element.\r\n        const cardElement = elements.getElement(CardElement);\r\n\r\n        // Use your card Element with other Stripe.js APIs\r\n        const { error, paymentMethod } = await stripe.createPaymentMethod({\r\n            type: 'card',\r\n            card: cardElement,\r\n        });\r\n\r\n        if (error) {\r\n            console.log('[error]', error);\r\n        } else {\r\n            console.log('[PaymentMethod]', paymentMethod);\r\n            fetch('/submitOrder', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    card: paymentMethod,\r\n                    order: props.data\r\n                })\r\n            })\r\n                .then((res) => res.json())\r\n                .then((res) => {\r\n                    console.log(res)\r\n\r\n                })\r\n        }\r\n    };\r\n\r\n    return (\r\n        <form style={{ maxWidth: \"500px\", margin: \"0 auto\" }} onSubmit={handleSubmit}>\r\n            <CardElement />\r\n            <button type=\"submit\" disabled={!stripe}>\r\n                Pay\r\n        </button>\r\n        </form>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}