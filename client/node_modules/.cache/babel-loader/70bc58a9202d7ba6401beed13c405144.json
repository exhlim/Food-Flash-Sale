{"ast":null,"code":"var _jsxFileName = \"/Users/eugenelim/Desktop/wdi/SEI-24-Project-3/client/src/Components/User/IndivStore/CheckoutForm.js\";\nimport React, { useState } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { useStripe, useElements, CardElement } from '@stripe/react-stripe-js';\n\nfunction Checkout(props) {\n  const [notEnuff, setNotEnuff] = useState(\"none\");\n  const [result, setResult] = useState(\"none\");\n  const [loadingDisplay, setLoadingDisplay] = useState(\"none\");\n  const [loading, setLoading] = useState(\"Loading.\");\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const handleSubmit = async event => {\n    // Block native form submission.\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not loaded yet. Make sure to disable\n      // form submission until Stripe.js has loaded.\n      return;\n    } // Get a reference to a mounted CardElement. Elements knows how\n    // to find your CardElement because there can only ever be one of\n    // each type of element.\n\n\n    const cardElement = elements.getElement(CardElement);\n    setLoadingDisplay(\"block\");\n    setLoading(\"Loading..\"); // Use your card Element with other Stripe.js APIs\n\n    const {\n      error,\n      paymentMethod\n    } = await stripe.createPaymentMethod({\n      type: 'card',\n      card: cardElement\n    });\n\n    if (error) {\n      console.log('[error]', error);\n    } else {\n      console.log('[PaymentMethod]', paymentMethod);\n      fetch('/submitOrder', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          card: paymentMethod,\n          order: props.data\n        })\n      }).then(res => res.json()).then(res => {\n        switch (res.status) {\n          case \"Payment Complete\":\n            {\n              setResult(\"none\");\n              setNotEnuff(\"none\");\n              alert(\"Payment Successful! \\n Click 'Ok' to continue.\");\n              setTimeout(() => {\n                props.history.push(\"/\");\n              }, 2000);\n              break;\n            }\n\n          case \"Payment Failed\":\n            {\n              setResult(\"block\");\n              break;\n            }\n\n          case \"Insufficient Inventory\":\n            {\n              setNotEnuff(\"block\");\n              break;\n            }\n        }\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    style: {\n      maxWidth: \"500px\",\n      margin: \"0 auto\"\n    },\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CardElement, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    disabled: !stripe,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }, \"Pay\"), /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      display: loadingDisplay\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }, loading), /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      display: result,\n      color: \"red\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, \"Payment Failed\"), /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      display: notEnuff,\n      color: \"red\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }, \"Insufficient Stock\"));\n}\n\nexport default withRouter(Checkout);","map":{"version":3,"sources":["/Users/eugenelim/Desktop/wdi/SEI-24-Project-3/client/src/Components/User/IndivStore/CheckoutForm.js"],"names":["React","useState","withRouter","useStripe","useElements","CardElement","Checkout","props","notEnuff","setNotEnuff","result","setResult","loadingDisplay","setLoadingDisplay","loading","setLoading","stripe","elements","handleSubmit","event","preventDefault","cardElement","getElement","error","paymentMethod","createPaymentMethod","type","card","console","log","fetch","method","headers","body","JSON","stringify","order","data","then","res","json","status","alert","setTimeout","history","push","maxWidth","margin","display","color"],"mappings":"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","sourcesContent":["\nimport React, { useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { useStripe, useElements, CardElement } from '@stripe/react-stripe-js';\nfunction Checkout(props) {\n    const [notEnuff, setNotEnuff] = useState(\"none\")\n    const [result, setResult] = useState(\"none\")\n    const [loadingDisplay, setLoadingDisplay] = useState(\"none\")\n    const [loading, setLoading] = useState(\"Loading.\")\n    const stripe = useStripe();\n    const elements = useElements();\n\n    const handleSubmit = async (event) => {\n        // Block native form submission.\n        event.preventDefault();\n\n        if (!stripe || !elements) {\n            // Stripe.js has not loaded yet. Make sure to disable\n            // form submission until Stripe.js has loaded.\n            return;\n        }\n        // Get a reference to a mounted CardElement. Elements knows how\n        // to find your CardElement because there can only ever be one of\n        // each type of element.\n        const cardElement = elements.getElement(CardElement);\n        setLoadingDisplay(\"block\")\n        setLoading(\"Loading..\")\n        // Use your card Element with other Stripe.js APIs\n        const { error, paymentMethod } = await stripe.createPaymentMethod({\n            type: 'card',\n            card: cardElement,\n        });\n\n        if (error) {\n            console.log('[error]', error);\n        } else {\n            console.log('[PaymentMethod]', paymentMethod);\n            fetch('/submitOrder', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    card: paymentMethod,\n                    order: props.data\n                })\n            })\n                .then(res => res.json())\n                .then(res => {\n                    switch (res.status) {\n                        case \"Payment Complete\": {\n                            setResult(\"none\");\n                            setNotEnuff(\"none\");\n                            alert(\"Payment Successful! \\n Click 'Ok' to continue.\")\n                            setTimeout(()=> {\n                                props.history.push(\"/\")\n                            }, 2000)\n                            break;\n                        }\n                        case \"Payment Failed\": {\n                            setResult(\"block\");\n                            break;\n                        }\n                        case \"Insufficient Inventory\": {\n                            setNotEnuff(\"block\")\n                            break;\n                        }\n                    }\n                })\n        }\n    };\n\n    return (\n        <form style={{ maxWidth: \"500px\", margin: \"0 auto\" }} onSubmit={handleSubmit}>\n            <CardElement />\n            <button type=\"submit\" disabled={!stripe}>\n                Pay\n        </button>\n            <p style={{ display: loadingDisplay }} >{loading}</p>\n            <p style={{ display: result, color: \"red\" }} >Payment Failed</p>\n            <p style={{ display: notEnuff, color: \"red\" }} >Insufficient Stock</p>\n        </form>\n    );\n}\n\nexport default withRouter(Checkout)"]},"metadata":{},"sourceType":"module"}